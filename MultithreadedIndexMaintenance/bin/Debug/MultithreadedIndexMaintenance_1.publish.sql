/*
Deployment script for MultithreadedIndexMaintenance2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MultithreadedIndexMaintenance2"
:setvar DefaultFilePrefix "MultithreadedIndexMaintenance2"
:setvar DefaultDataPath "C:\Users\nwiddup\AppData\Local\Microsoft\VisualStudio\SSDT"
:setvar DefaultLogPath "C:\Users\nwiddup\AppData\Local\Microsoft\VisualStudio\SSDT"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[FragmentedIndexes]...';


GO
CREATE TABLE [dbo].[FragmentedIndexes] (
    [Id]                   BIGINT          IDENTITY (1, 1) NOT NULL,
    [DateAdded]            DATETIME        NOT NULL,
    [DateStarted]          DATETIME        NULL,
    [DateCompleted]        DATETIME        NULL,
    [DBName]               VARCHAR (128)   NOT NULL,
    [SchemaName]           VARCHAR (256)   NOT NULL,
    [TableName]            VARCHAR (256)   NOT NULL,
    [IndexName]            VARCHAR (256)   NOT NULL,
    [FragmentationPercent] DECIMAL (15, 2) NOT NULL,
    [IndexID]              INT             NOT NULL,
    [PageCount]            INT             NOT NULL,
    [RunnerID]             SMALLINT        NULL,
    [StatusID]             SMALLINT        NULL,
    [CustomOrder]          INT             NULL,
    CONSTRAINT [PK_FragmentedIndexes_ID] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Runners]...';


GO
CREATE TABLE [dbo].[Runners] (
    [RunnerID]   SMALLINT         IDENTITY (1, 1) NOT NULL,
    [JobName]    NVARCHAR (128)   NOT NULL,
    [JobID]      UNIQUEIDENTIFIER NOT NULL,
    [ScheduleID] INT              NOT NULL,
    [CreateDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_Runners_RunnerID] PRIMARY KEY CLUSTERED ([RunnerID] ASC)
);


GO
PRINT N'Creating [dbo].[Statuses]...';


GO
CREATE TABLE [dbo].[Statuses] (
    [StatusID]   SMALLINT      IDENTITY (1, 1) NOT NULL,
    [StatusDesc] VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_Statuses_StatusID] PRIMARY KEY CLUSTERED ([StatusID] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[FragmentedIndexes]...';


GO
ALTER TABLE [dbo].[FragmentedIndexes]
    ADD DEFAULT GetDate() FOR [DateAdded];


GO
PRINT N'Creating unnamed constraint on [dbo].[FragmentedIndexes]...';


GO
ALTER TABLE [dbo].[FragmentedIndexes]
    ADD DEFAULT '1' FOR [StatusID];


GO
PRINT N'Creating [dbo].[usp_CreateWatcherJob]...';


GO
CREATE PROCEDURE [dbo].[usp_CreateWatcherJob]
	@JobNameToWatch nvarchar(128)
	

AS

BEGIN

	Declare
		@WatcherJobName nvarchar(128)
		, @WatcherScheduleName nvarchar(128)
		, @jobId BINARY(16)
		, @schedule_id int
		, @ScheduleName nvarchar(128)

	Select @WatcherJobName = @JobNameToWatch + '_Watcher'
		, @WatcherScheduleName = @WatcherJobName + '_Sched'

	-- Create Watcher Job
	EXEC  msdb.dbo.sp_add_job @job_name=@WatcherJobName,
			@enabled=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=2, 
			@notify_level_page=2, 
			@delete_level=0, 
			@category_name=N'Database Maintenance', 
			@owner_login_name=N'sa', @job_id = @jobId OUTPUT
	--select @jobId
	--GO
	EXEC msdb.dbo.sp_add_jobserver @job_name=@WatcherJobName, @server_name = N'SQL01'
	--GO
	--USE [msdb]
	--GO
	EXEC msdb.dbo.sp_add_jobstep @job_name=@WatcherJobName, @step_name=N'WatchIndexMaint', 
			@step_id=1, 
			@cmdexec_success_code=0, 
			@on_success_action=1, 
			@on_fail_action=2, 
			@retry_attempts=0, 
			@retry_interval=0, 
			@os_run_priority=0, @subsystem=N'TSQL', 
			@command=N'-- Exec dbo.usp_WatchJob @JobID = ', 
			@database_name=N'MultithreadedIndexMaintenance', 
			@flags=0
	--GO
	--USE [msdb]
	--GO
	EXEC msdb.dbo.sp_update_job @job_name=@WatcherJobName, 
			@enabled=1, 
			@start_step_id=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=2, 
			@notify_level_page=2, 
			@delete_level=0, 
			@description=N'', 
			@category_name=N'Database Maintenance', 
			@owner_login_name=N'sa', 
			@notify_email_operator_name=N'', 
			@notify_page_operator_name=N''
	--GO
	--USE [msdb]
	--GO
	--DECLARE 
	EXEC msdb.dbo.sp_add_jobschedule @job_name=@WatcherJobName, @name=@WatcherScheduleName, 
			@enabled=1, 
			@freq_type=8, 
			@freq_interval=64, 
			@freq_subday_type=1, 
			@freq_subday_interval=0, 
			@freq_relative_interval=0, 
			@freq_recurrence_factor=1, 
			@active_start_date=20181228, 
			@active_end_date=99991231, 
			@active_start_time=10000, 
			@active_end_time=235959, @schedule_id = @schedule_id OUTPUT
	--select @schedule_id
	--GO

END
GO
PRINT N'Creating [dbo].[usp_DefragIndexes]...';


GO
CREATE PROCEDURE [dbo].[usp_DefragIndexes]
	@RunnerID int

AS

BEGIN

	SET NOCOUNT ON

	Declare @SqlCmd nvarchar(max)
		, @IxID int

	WHILE exists (select top 1 1 from dbo.FragmentedIndexes where RunnerID = @RunnerID and StatusID = 1 and DateCompleted is null)
	BEGIN
		-- get index to rebuild
		SELECT TOP 1 
			@IxID = [Id]
			--,[DateAdded]
			, @SqlCmd = 'use ' + quotename(dbname) + ' -- Alter Index ' +quotename(IndexName)+ ' on ' +quotename(schemaname)+ '.' + quotename(tablename)+ ' REBUILD WITH (ONLINE = ON)'
		FROM dbo.FragmentedIndexes
		WHERE RunnerID = @RunnerID
			AND StatusID = 1
			AND DateCompleted is null
		ORDER BY CustomOrder ASC

		Update dbo.FragmentedIndexes
			set StatusID = 2
				, DateStarted = GetDate()
			where ID = @IxID
		
		Begin Try
			Print @SqlCmd
		
			Update dbo.FragmentedIndexes
				set StatusID = 3
					, DateCompleted = GetDate()
				where ID = @IxID
		End Try
		Begin Catch
			Update dbo.FragmentedIndexes
				set StatusID = 4
					, DateCompleted = GetDate()
				where ID = @IxID
		End Catch
	
	END
	
END
GO
PRINT N'Creating [dbo].[usp_GetFragmentedIndexes]...';


GO
CREATE PROCEDURE [dbo].[usp_GetFragmentedIndexes]

AS

BEGIN
	--Select [DBName], [SchemaName], [TableName], [IndexName], [IndexID] , [RunnerID], [StatusID], [CustomOrder] 
	Declare @SqlCmd nvarchar(max)

	-- Get all fragmented indexes on the instance to be rebuilt
	set @SqlCmd = '
	exec sp_MSforeachdb ''
		use [?]
		declare @dbid int
		
		select @dbid = database_id
		from sys.databases
		where name = DB_NAME()

		SELECT 
			''''?'''' as dbname,
			OBJECT_SCHEMA_NAME(ps.object_id),
			OBJECT_NAME(ps.object_id)
			, i.name
			, ps.avg_fragmentation_in_percent
			, i.index_id
			, ps.page_count
		from sys.dm_db_index_physical_stats(@dbid,null,null,null,null) as ps
			join sys.indexes as i
				on ps.object_id = i.object_id AND ps.index_id = i.index_id
		where avg_fragmentation_in_percent > 30 and page_count > 100 and ps.index_id > 0
		order by ps.index_id, ps.object_id
	''
'



	Insert Into dbo.FragmentedIndexes ([DBName], [SchemaName], [TableName], [IndexName], [FragmentationPercent], [IndexID], [PageCount])
		Exec (@SqlCmd)



END
GO
PRINT N'Creating [dbo].[usp_SortFragmentedIndexes]...';


GO
CREATE PROCEDURE [dbo].[usp_SortFragmentedIndexes]

AS

BEGIN

	-- set the custom sort order & RunnerID & set all indexes to "New" entries

	Declare @RunnerCount int
	Select @RunnerCount = 
		case Count(RunnerID) 
			when 0 then 1
			else Count(RunnerID)
			end
		from dbo.Runners

	update
		i
	set
		i.CustomOrder = b.RowNum,
		i.RunnerID = (b.RowNum % @RunnerCount)+1,
		i.StatusID = 1
	From
		dbo.FragmentedIndexes as i
		inner join (
			select Id, StatusID, IndexID, pagecount
				, ROW_NUMBER() OVER(partition by StatusID order by case when IndexID > 1 then 2 else 1 end, PageCount desc) as RowNum
				from dbo.FragmentedIndexes
				where DateCompleted is null) as b 
					on b.Id = i.Id


END
GO
PRINT N'Creating [dbo].[usp_WatchJob]...';


GO
CREATE PROCEDURE [dbo].[usp_WatchJob]

AS

BEGIN

	select 1

END
GO
PRINT N'Creating [dbo].[usp_CreateNewRunnerWithWatcher]...';


GO
CREATE PROCEDURE [dbo].[usp_CreateNewRunnerWithWatcher]

AS

BEGIN

	Declare @RunnerID int
		, @GUID uniqueidentifier
		, @JobName nvarchar(128)
		, @jobId BINARY(16)
		, @schedule_id int
		, @ScheduleName nvarchar(128)
		, @DefragCmd nvarchar(256)

	Select  @GUID = NEWID()
		, @JobName = 'IxMaint_' + cast(@GUID as nvarchar(128))
		, @ScheduleName = @JobName + '_Sched'
	
	--Select @JobName
	
	-- Create Runner Job
	EXEC  msdb.dbo.sp_add_job @job_name=@JobName,
			@enabled=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=2, 
			@notify_level_page=2, 
			@delete_level=0, 
			@category_name=N'Database Maintenance', 
			@owner_login_name=N'sa', @job_id = @jobId OUTPUT
	--select @jobId
	--GO
	EXEC msdb.dbo.sp_add_jobserver @job_name=@JobName, @server_name = N'SQL01'
	--GO
	--USE [msdb]
	--GO
	EXEC msdb.dbo.sp_add_jobstep @job_name=@JobName, @step_name=N'RunIndexMaint', 
			@step_id=1, 
			@cmdexec_success_code=0, 
			@on_success_action=1, 
			@on_fail_action=2, 
			@retry_attempts=0, 
			@retry_interval=0, 
			@os_run_priority=0, @subsystem=N'TSQL', 
			@command=N'-- Exec dbo.usp_DefragIndexes', 
			@database_name=N'MultithreadedIndexMaintenance', 
			@flags=0
	--GO
	--USE [msdb]
	--GO
	EXEC msdb.dbo.sp_update_job @job_name=@JobName, 
			@enabled=1, 
			@start_step_id=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=2, 
			@notify_level_page=2, 
			@delete_level=0, 
			@description=N'', 
			@category_name=N'Database Maintenance', 
			@owner_login_name=N'sa', 
			@notify_email_operator_name=N'', 
			@notify_page_operator_name=N''
	--GO
	--USE [msdb]
	--GO
	--DECLARE 
	EXEC msdb.dbo.sp_add_jobschedule @job_name=@JobName, @name=@ScheduleName, 
			@enabled=1, 
			@freq_type=8, 
			@freq_interval=64, 
			@freq_subday_type=1, 
			@freq_subday_interval=0, 
			@freq_relative_interval=0, 
			@freq_recurrence_factor=1, 
			@active_start_date=20181228, 
			@active_end_date=99991231, 
			@active_start_time=10000, 
			@active_end_time=235959, @schedule_id = @schedule_id OUTPUT
	--select @schedule_id
	--GO

	Insert Into dbo.Runners (JobName, JobID, ScheduleID, CreateDate)
		Select @JobName, @jobId, @schedule_id, GetDate()
	
	Select @RunnerID = RunnerID
		, @DefragCmd = N'Exec dbo.usp_DefragIndexes @RunnerID = ' + cast(RunnerID as nvarchar(10))
		From dbo.Runners
		Where JobName = @JobName

	EXEC msdb.dbo.sp_update_jobstep @job_name=@JobName,
			@step_id=1, 
			@command=@DefragCmd

	Exec dbo.usp_CreateWatcherJob
		@JobNameToWatch = @JobName
		--@RunnerID = @RunnerID, @WatchJobName = @JobName

END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

-- Insert Reference Data for Statuses
Truncate table dbo.Statuses

SET IDENTITY_INSERT dbo.Statuses ON

Insert into dbo.Statuses (StatusID, StatusDesc)
Select 1, 'New'
Union Select 2, 'Not Yet Started'
Union Select 3, 'In-Progress'
Union Select 4, 'Complete'
Union Select 5, 'Error'


-- Create Job to build table of Indexes needing maintenance

USE [msdb]
GO
DECLARE @jobId BINARY(16)
EXEC  msdb.dbo.sp_add_job @job_name=N'IxMaintBuildTable', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=2, 
		@notify_level_page=2, 
		@delete_level=0, 
		@category_name=N'Database Maintenance', 
		@owner_login_name=N'sa', @job_id = @jobId OUTPUT
EXEC msdb.dbo.sp_add_jobserver @job_name=N'BuildIxMaintTable', @server_name = N'SQL01'
GO
EXEC msdb.dbo.sp_add_jobstep @job_name=N'BuildIxMaintTable', @step_name=N'Get Indexes', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_fail_action=2, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'Exec dbo.usp_GetFragmentedIndexes', 
		@database_name=N'MultithreadedIndexMaintenance2', 
		@flags=0
GO
EXEC msdb.dbo.sp_add_jobstep @job_name=N'BuildIxMaintTable', @step_name=N'Sort Indexes by Custom Priority', 
		@step_id=2, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_fail_action=2, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'Exec dbo.usp_SortFragmentedIndexes', 
		@database_name=N'MultithreadedIndexMaintenance2', 
		@flags=0
GO
EXEC msdb.dbo.sp_update_job @job_name=N'BuildIxMaintTable', 
		@enabled=1, 
		@start_step_id=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=2, 
		@notify_level_page=2, 
		@delete_level=0, 
		@description=N'', 
		@category_name=N'Database Maintenance', 
		@owner_login_name=N'sa', 
		@notify_email_operator_name=N'', 
		@notify_page_operator_name=N''
GO
DECLARE @schedule_id int
EXEC msdb.dbo.sp_add_jobschedule @job_name=N'BuildIxMaintTable', @name=N'Build Index Maint list', 
		@enabled=1, 
		@freq_type=8, 
		@freq_interval=64, 
		@freq_subday_type=1, 
		@freq_subday_interval=0, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=1, 
		@active_start_date=20181228, 
		@active_end_date=99991231, 
		@active_start_time=0, 
		@active_end_time=235959, @schedule_id = @schedule_id OUTPUT
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
